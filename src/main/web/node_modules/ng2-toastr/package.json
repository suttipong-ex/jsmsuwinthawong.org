{
  "_args": [
    [
      {
        "raw": "ng2-toastr@github:pointinside/ng2-toastr#ng4",
        "scope": null,
        "escapedName": "ng2-toastr",
        "name": "ng2-toastr",
        "rawSpec": "github:pointinside/ng2-toastr#ng4",
        "spec": "github:pointinside/ng2-toastr#ng4",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:pointinside/ng2-toastr.git#ng4",
          "sshUrl": "git+ssh://git@github.com/pointinside/ng2-toastr.git#ng4",
          "httpsUrl": "git+https://github.com/pointinside/ng2-toastr.git#ng4",
          "gitUrl": "git://github.com/pointinside/ng2-toastr.git#ng4",
          "shortcut": "github:pointinside/ng2-toastr#ng4",
          "directUrl": "https://raw.githubusercontent.com/pointinside/ng2-toastr/ng4/package.json"
        }
      },
      "/home/exodus/NetBeansProjects/jsmsuwinthawong/src/main/web"
    ]
  ],
  "_from": "pointinside/ng2-toastr#ng4",
  "_id": "ng2-toastr@1.6.0",
  "_inCache": true,
  "_location": "/ng2-toastr",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ng2-toastr@github:pointinside/ng2-toastr#ng4",
    "scope": null,
    "escapedName": "ng2-toastr",
    "name": "ng2-toastr",
    "rawSpec": "github:pointinside/ng2-toastr#ng4",
    "spec": "github:pointinside/ng2-toastr#ng4",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:pointinside/ng2-toastr.git#ng4",
      "sshUrl": "git+ssh://git@github.com/pointinside/ng2-toastr.git#ng4",
      "httpsUrl": "git+https://github.com/pointinside/ng2-toastr.git#ng4",
      "gitUrl": "git://github.com/pointinside/ng2-toastr.git#ng4",
      "shortcut": "github:pointinside/ng2-toastr#ng4",
      "directUrl": "https://raw.githubusercontent.com/pointinside/ng2-toastr/ng4/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/pointinside/ng2-toastr.git#86b85abd9b087bde77fd39adbb593a1ce72b73fb",
  "_shasum": "fc33523ad346d4daa8124bc5df32ada885effc96",
  "_shrinkwrap": null,
  "_spec": "ng2-toastr@github:pointinside/ng2-toastr#ng4",
  "_where": "/home/exodus/NetBeansProjects/jsmsuwinthawong/src/main/web",
  "author": {
    "name": "Derek Shi"
  },
  "bugs": {
    "url": "https://github.com/PointInside/ng2-toastr/issues"
  },
  "dependencies": {},
  "description": "bootstrap style of toast for modern angular",
  "devDependencies": {
    "@angular/animations": "4.0.0-rc.3",
    "@angular/common": "4.0.0-rc.3",
    "@angular/compiler": "4.0.0-rc.3",
    "@angular/compiler-cli": "4.0.0-rc.3",
    "@angular/core": "4.0.0-rc.3",
    "@angular/http": "4.0.0-rc.3",
    "@angular/platform-browser": "4.0.0-rc.3",
    "@angular/platform-browser-dynamic": "4.0.0-rc.3",
    "@angular/platform-server": "4.0.0-rc.3",
    "async": "1.5.2",
    "bootstrap": "^3.3.6",
    "concurrently": "^2.2.0",
    "core-js": "^2.4.1",
    "css-loader": "0.23.1",
    "del": "2.2.0",
    "gulp": "3.9.0",
    "gulp-cssnano": "2.1.0",
    "gulp-eslint": "1.1.1",
    "gulp-rename": "1.2.2",
    "gulp-rimraf": "~0.2",
    "gulp-size": "2.0.0",
    "gulp-tslint": "4.3.1",
    "lite-server": "^2.2.2",
    "reflect-metadata": "^0.1.3",
    "require-dir": "0.3.0",
    "rxjs": "^5.1.0",
    "style-loader": "~0.13",
    "systemjs": "0.19.27",
    "systemjs-builder": "0.15.6",
    "ts-loader": "~0.8.2",
    "tslint": "^3.15.1",
    "typescript": "^2.1.0",
    "typings": "^1.3.2",
    "zone.js": "^0.7.6"
  },
  "gitHead": "86b85abd9b087bde77fd39adbb593a1ce72b73fb",
  "homepage": "https://github.com/PointInside/ng2-toastr#readme",
  "keywords": [
    "toast",
    "toaster",
    "toastr",
    "angular 2",
    "bootstrap",
    "notification"
  ],
  "license": "ISC",
  "main": "ng2-toastr.js",
  "name": "ng2-toastr",
  "optionalDependencies": {},
  "readme": "Angular Toaster Module (ng2-toastr)\n===================\n\n[![](https://img.shields.io/badge/npm-v4.0.0-brightgreen.svg)](https://www.npmjs.com/package/ng2-toastr)\n\nThe lib is inspired by [angular-toastr] (https://github.com/Foxandxss/angular-toastr), and will show bootstrap-like toasts. \nPlease update Modern Angular (v4.0.0+) latest version to avoid any unexpected issues. \nWe jumped version from v1.x to v4.x in order to match Angular version.\n\nNOTE 1: In order to use animation, please include Animation Module from `angular v4.x` to your project:\n\n```\n    import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n    \n    @NgModule({\n      imports: [BrowserModule, BrowserAnimationsModule, ToastModule.forRoot()],\n      ...\n    })\n    export class AppModule {\n    }\n```\n\n![Examples](toastr-examples.jpg?raw=true \"Bootstrap Toasts\")\n\nNOTE 2: Version 4.0.x and above works with Angular v4 (Tested with Angular v4.0.0-rc.3 and Angular-Cli v1.0.0-rc.2).\nUse v1.6.0 if you are working with `angular v2.x`.      \n    \n## Usage\n\n1. Install ng2-toastr using npm:\n\n    ``` npm install ng2-toastr --save ```\n\n2. Include js and css files in html header\n    \n    ```\n    <link href=\"node_modules/ng2-toastr/bundles/ng2-toastr.min.css\" rel=\"stylesheet\" />\n    <script src=\"node_modules/ng2-toastr/bundles/ng2-toastr.min.js\"></script>\n    \n    ```\n    \n    NOTE: If you are using angular-cli you do not need to include 'node_modules/ng2-toastr/bundles/ng2-toastr.min.js', since adding 'import {ToastModule} from 'ng2-toastr/ng2-toastr';' to your module file (below) will allow it to be autoloaded.\n\n3. Add ToastModule into your AppModule class. `app.module.ts` would look like this:\n\n    ```javascript\n    \n        import {NgModule} from '@angular/core';\n        import {BrowserModule} from '@angular/platform-browser';\n        import {AppComponent} from './app.component';\n        import {ToastModule} from 'ng2-toastr/ng2-toastr';\n        \n        @NgModule({\n          imports: [BrowserModule, ToastModule.forRoot()],\n          declarations: [AppComponent],\n          bootstrap: [AppComponent],\n        })\n        export class AppModule {\n        \n        }\n    ```\n\n4. Inject 'ToastsManager' class in your component class.\n\n    ```typescript\n        import { ToastsManager } from 'ng2-toastr/ng2-toastr';\n        \n        @Component({\n          selector: 'awesome-component',\n          template: '<button class=\"btn btn-default\" (click)=\"showSuccess()\">Toastr Tester</button>'\n        })\n        export class AppComponent {\n        \n          constructor(public toastr: ToastsManager, vcr: ViewContainerRef) {\n             this.toastr.setRootViewContainerRef(vcr);\n          }\n            \n          showSuccess() {\n            this.toastr.success('You are awesome!', 'Success!');\n          }\n        \n          showError() {\n            this.toastr.error('This is not good!', 'Oops!');\n          }\n        \n          showWarning() {\n            this.toastr.warning('You are being warned.', 'Alert!');\n          }\n        \n          showInfo() {\n            this.toastr.info('Just some information for you.');\n          }\n          \n          showCustom() {\n            this.toastr.custom('<span style=\"color: red\">Message in red.</span>', null, {enableHTML: true});\n          }\n        }\n    ```\n\n### ToastOptions Configurations\n\nBy default, the toastr will show up at top right corner of the page view, and will automatically dismiss in 3 seconds. \nYou can configure the toasts using ToastOptions class. Currently we support following options:\n\n##### toastLife: (number)\nDetermines how long an auto-dismissed toast will be shown. Defaults to 5000 miliseconds.\n\n##### dismiss: (string)\nDetermine how a displayed toaster can be dismissed. Allowed values are: 'auto', 'click', 'controlled' (value should all be lowercase).\n* auto: Toaster will auto dismiss in miliseconds (value specified by `toastLife`). This is default value.\n* click: Toaster will be dismissed when user click on it.\n* controlled: Toaster will be dismissed based on specific logic.\n \n##### newestOnTop: (boolean) \nDetermines whether new toast should show up on top of previous toast Defaults to false.\n\n##### showCloseButton: (boolean)\nDetermines whether toast should include 'x' close button. Defaults to false.\n\n##### maxShown: (number)\nDetermines maximum number of toasts can be shown on the page in the same time. Defaults to 5.\n\n##### positionClass: (string)\nDetermines where on the page the toasts should be shown. Here are list of values: \n* toast-top-right (Default)\n* toast-top-center\n* toast-top-left\n* toast-top-full-width\n* toast-bottom-right\n* toast-bottom-center\n* toast-bottom-left\n* toast-bottom-full-width\n\n##### messageClass: (string)\nCSS class for message within toast.\n\n##### titleClass: (string)\nCSS class for title within toast.\n\n##### <a name=\"animate-option\"></a>animate: (string)\nYou have following choice: 'fade', 'flyLeft' or 'flyRight'. \n* fade: makes every toast either fade in or fade out.\n* flyLeft: makes every toast fly in from left side. \n* flyRight: makes every toast fly in from right side.\nDefaults to 'fade'. You can set `animate: null` to disable animations.\n\n##### enableHTML: (boolean)\nAllow input of message to be HTML. Default to false.\n\nUse dependency inject for custom configurations. You can either inject into `app.module.ts` or any component class.\n   \n    // custom-option.ts\n    import {ToastOptions} from 'ng2-toastr';\n    \n    export class CustomOption extends ToastOptions {\n      animate = 'flyRight'; // you can override any options available\n      newestOnTop = false;\n      showCloseButton = true;\n    }\n    \n    // app.module.ts\n    import { CustomOption } from './custom-option';\n    \n    @NgModule({\n      declarations: [ ... ],\n      imports: [\n        ...\n        ToastModule.forRoot(),\n      ],\n      providers: [ \n        {provide: ToastOptions, useClass: CustomOption},\n        ...\n      ],\n      bootstrap: [ ... ]\n    })   \n    \n### <a name='override'></a>Override global option:\n \n You can also override `dismiss`, `toastLife`, `enableHTML`, `titleClass`, `messageClass` options for individual toast:\n    \n    this.toastr.sucess('This toast will dismiss in 10 seconds.', null, {toastLife: 10000});\n    this.toastr.info('<span style=\"color: red\">Message in red.</span>', null, {enableHTML: true});\n \n NOTE: specify a value for `toastLife` overrides `dismiss` and always set `dismiss = 'auto'`.\n\n Should you need specific logic to determine when a toaster will be dismissed you can store the displayed `Toast`. \n Be cautious when the toaster can be dismissed in other ways such as `dismiss: 'auto'` or `dismiss: 'click'`.\n\n    \n        this.toastr.success('You are awesome!', 'Success!', {dismiss: 'controlled'})\n            .then((toast: Toast) => {\n                setTimeout(() => {\n                    this.toastr.dismissToast(toast);\n                }, 10000);\n            });\n    \n\n## Use `onClickToast` observable on `ToastManager` instance\n1. Now you can added custom data object to each toast.\n\n    Following example shows how to allow user to click on toast to navigate to new path:\n    \n    ```\n    this.toastr.onClickToast()\n        .subscribe( toast => {            \n            if (toast.data && toast.data.url) {\n              // navigate to\n              this.router.navigate(toast.data.url);\n            }\n        });\n        \n    this.toastr.success('You are awesome! Click to view details.', 'Success!', {data: {url: '/path/to/successUrl'}});\n    ```\n\n2. Each `Toast` instance includes `timeoutId`, which allows developer to stop auto-dismiss.\n   \n    ```\n    if (toast.timeoutId) {\n      clearTimeout(toast.timeoutId);\n      // do something before dismiss the toast\n      this.toastr.dismiss(toast);    \n    }\n\n## Run demo app\n    \n#### systemjs\n    \n    > cd demo/systemjs && npm install\n    > npm start    \n\nThen navigate your browser to http://localhost:3000    \n    \n#### webpack\n    \n    > cd demo/webpack && npm run install\n    > npm run build\n    > npm start\n\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PointInside/ng2-toastr.git"
  },
  "scripts": {
    "build:dev": "webpack-dev-server --hot --inline --colors --display-error-details --display-cached",
    "build:prod": "NODE_ENV=production webpack -p --progress --color --optimize-minimize --optimize-dedupe --optimize-occurence-order",
    "lite": "lite-server",
    "ngc": "ngc",
    "prepublish": "gulp clean && ngc && node make.js && gulp bundle-css",
    "start": "concurrently \"npm run tsc:w\" \"npm run lite\" ",
    "tsc": "tsc",
    "tsc:w": "tsc -w",
    "typings": "typings install",
    "webpack": "webpack --progress --profile --bail"
  },
  "typings": "ng2-toastr.d.ts",
  "version": "1.6.0"
}
